Data Structure:
-[0]Packet ID: floor (69) or elevator (21)
-[1]element #: floor[0], floor[1] -> 0 and 1, or elevator[1], elevator [2] -> 1 and 2
-[2]request or status update: floor is always request, elevator can be status update or request
-[3]elevator floor#: for status updates
-[4]floor request: up or down
-[5]elevator request: which floor 
-[6]command: sent from the scheduler

	//UNIFIED CONSTANTS DECLARATION FOR ALL CLASSES
	//States
	private static final byte UP = 0x01;// elevator is going up
	private static final byte DOWN = 0x02;// elevator is going down
	private static final byte STOP = 0x03;
	private static final byte HOLD = 0x04;// elevator is in hold state
	private static final byte UPDATE_DISPLAY = 0x05;
	private static final byte ERROR=0xE0;//an error has occured
	//Errors
	private static final byte DOOR_ERROR=0xE1;
	private static final byte MOTOR_ERROR=0xE2;
	//still error states between 0xE3 to 0xEE for use
	private static final byte OTHER_ERROR=0xEF; 
	private static final byte NO_ERROR=0x00;
	//Object ID
	private static final int ELEVATOR_ID = 21;// for identifying the packet's source as elevator
	private static final int FLOOR_ID = 69;// for identifying the packet's source as floor
	private static final int SCHEDULER_ID = 54;// for identifying the packet's source as scheduler
	//Values for Running
	private static final int DOOR_OPEN = 1;// the door is open when == 1
	private static final int DOOR_CLOSE = 3; // the door is closed when == 3 
	private static final int DOOR_DURATION = 4;// duration (in seconds) that doors stay open for
	private static final int REQUEST = 1;// for identifying the packet type sent to scheduler as a request
	private static final int UPDATE = 2;// for identifying the packet type sent to scheduler as a status update
	private static final int INITIALIZE=8;
	private static final byte[] ELEVATOR_INITIALIZE_PACKET_DATA={ELEVATOR_ID,0,INITIALIZE, 0,0,0,0,0};
	private static final byte[] FLOOR_INITIALIZE_PACKET_DATA={FLOOR_ID,0,INITIALIZE, 0,0,0,0,0};
	private static final int UNUSED=0;// value for unused parts of data 
	private static final int DOOR_CLOSE_BY=6;//door shouldn't be open for longer than 6 seconds
	

Data Structure:
index0: ID (identify whether it is a floor, elevator, or scheduler Sending the packet)
index1: floor#/elevator# (identify which floor/elevator)
index2: request, Status update, INITIALIZE, or Error(always)
index3: current floor of the elevator
index4: floor's request direction(up/down)
index5: Destination Request(floor number of the stop to be added)
index6: instruction(what is coming back from scheduler; up, down, stop, hold, update, etc. )
index7: error type(if there are any and what kind)]

Scheduler Commands:
-sending to elevator
1:start motor up
2:start motor down
3:make a stop
4:put on hold
-sending to floor
5:update floor's displays (current floor of the elvator, and direction of the elevator)
	-should automatically update all the floors

Naming Convention:
-ALL CAPS: should be constants
-firstLowerCaseThenFirstLetterOfEachUpperCase: 



NOTES:
General:
-add/ set constants that are shared by all classes (copy/paste works just fine as long as we update all classes every time)
	int or byte HOLD=___, UP=___, DOWN=___
	ELEVATOR_ID=___, FLOOR_ID=___, SCHEDULER_ID=___
	
-set constants:
	-travel time between floors: 1 second right?
	from scheduler: 
	TIME_PER_FLOOR=1;
	-stop time: 5 seconds right? (including doors opening and closing)
	from scheduler: 
	DOOR_OPEN=4;
-HOLD compared with STOP states: HOLD is an elevator state (no requests, no stops) and STOP is a motor State

Floor Specific:

Elevator Specific:
-

Scheduling Specific:
	-scheduler: creatNumElevators, createNumFloors values are no longer passed from main()'s parameter since scheduler is no longer responsible for launching/creating threads
		-TO DO: receive packets from the intermediate classes on startup to initialize those variables
			-change variable names to numElevators, numFloors
	-stops: currently being fulfilled (current direction and next; does not include those that have already been missed)
	-requests: not going to be fulfilled in the current round (ie. already missed that floor for the current direction)	

